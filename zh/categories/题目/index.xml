<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>题目 on 绯想天</title><link>https://blog.fei.ac/zh/categories/%E9%A2%98%E7%9B%AE/</link><description>Recent content in 题目 on 绯想天</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2020 - 2023 Fei Pan</copyright><lastBuildDate>Sat, 08 Jun 2024 20:08:21 +0800</lastBuildDate><atom:link href="https://blog.fei.ac/zh/categories/%E9%A2%98%E7%9B%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>luogu/P9170 [省选联考 2023] 填数游戏</title><link>https://blog.fei.ac/zh/posts/luogu/p9170/</link><pubDate>Sat, 08 Jun 2024 20:08:21 +0800</pubDate><guid>https://blog.fei.ac/zh/posts/luogu/p9170/</guid><description>&lt;blockquote>
&lt;p>对于 $i = 1 \ldots n$，Alice 需要从 $S_i$ 中选择一个数作为 $a_i$；在这之后，Bob 需要从 $T_i$ 中选择 $b_i$。其中 $1 \le |S_i|, |T_i| \le 2$。&lt;/p>
&lt;p>设 $X = \sum\limits_{i=1}^n [a_i = b_i]$。Alice 的目标是最大化 $X$，Bob 的目标是在保证 $b_i$ 互不相同的前提下最小化 $X$。判断 Bob 能否保证 $b_i$ 互不相同，并在他能时求最终 $X$ 的值。&lt;/p>
&lt;/blockquote>
&lt;p>将每个 $T_i = \{u_i, v_i\}$ 转化为一条边 $(u_i, v_i)$ (特别的，$|T_i| = 1$ 时转化为一条自环)，则显然 Bob 能保证 $b_i$ 互不相同的充要条件是图为一个由基环树或树构成的森林 (即每个连通块 $C$ 含有的边数小于等于 $|C|$)。&lt;/p>
&lt;p>接下来考虑 $X$。对于基环树，树边只有一种选法，所有环边作为一个整体共有两种选法。对于 Alice 的每个 $S_i$，记录 $S_i$ 中选项对 Bob 选法的贡献，最大化其对 Bob 两种选法产生的总贡献的最小值，贪心即可。&lt;/p>
&lt;p>对于树，显然其中恰好有一个节点未被任何边占用，每个节点未被占用都对应 Bob 的一种选法，故 Bob 共有 $|C|$ 种选法，记其中不占用节点 $x$ 的选法为 $D_x$。对于 Alice 的一条边 $(u_i, v_i)$，若其选择了 $u_i$，则对于所有 $u_i$ 子树外的节点 $x$，当 Bob 使用 $D_x$ 时，Alice 的这种选法都会对 $X$ 产生 $1$ 的贡献。形式化地，记 Bob 选用 $D_x$ 时 $X$ 的值为 $F_x$，则 Alice 选用 $u_i$ 的效果为：$\forall x \notin \mathrm{subtree}(u_i): F_x \gets F_x + 1$。Alice 的目标是最大化 $\min\limits_{x} F_x$。&lt;/p>
&lt;p>显然这个问题可以利用树形 DP 在 $O(n^3)$ 的时间复杂度内解决。然而我们需要更快的解法。&lt;/p>
&lt;p>通过观察不难发现存在一个 Alice 的最优选法，其中存在一个点 $x$，将树以 $x$ 为根，Alice 所有边都选用深度较大的节点。因为对于两个 Alice 的边 $(p, q)$ 和 $(q, r)$，不应两条边都选取 $q$，这样劣于两条边分别选取 $p$、$r$；根据这样的决策原则，可以确定存在一个最优选法为所有边都选深度较大的节点。于是我们可以在 $O(n\log n)$ 的时间内通过 DFS 和线段树得到以所有点为根时 $\min\limits_{x} F_x$ 的值。&lt;/p>
&lt;p>代码：&lt;a href="https://github.com/fei0319/competitive-programming/blob/main/code/luogu/P9170.cpp">https://github.com/fei0319/competitive-programming/blob/main/code/luogu/P10547.cpp&lt;/a>&lt;/p></description></item><item><title>luogu/P10547 [THUPC2024] 排列游戏</title><link>https://blog.fei.ac/zh/posts/luogu/p10547/</link><pubDate>Mon, 03 Jun 2024 19:45:40 +0800</pubDate><guid>https://blog.fei.ac/zh/posts/luogu/p10547/</guid><description>&lt;blockquote>
&lt;p>对于一 $1$ 至 $n$ 的排列 $p$，若交换 $p_i$ 和 $p_j$ 的代价为 $|i - j|$，则定义 $p$ 的值为将 $p$ 变为 $1, 2, \ldots, n$ 的最小代价。&lt;/p>
&lt;p>求能够由 $1, 2, \ldots, n$ 进行恰好 $n$ 次交换得到，且值小于等于 $m$ 的排列的个数。&lt;/p>
&lt;/blockquote>
&lt;p>显然 $p$ 的值小于等于 $m$ 等价于 $\sum\limits_{i=1}^n |p_i - i| \le 2m$。其必要性显然，充分性可由直接沿置换环交换证明。&lt;/p>
&lt;p>对 $\sum\limits_{i=1}^n |p_i - i| \le 2m$ 进行转化后可得：$n$ 个点分别位于数轴 $1, 2, \ldots, n$ 处，计算每个点出度入度均为 $1$ 且总边长不大于 $2m$ 的连边方案数。考虑前 $i$ 个点，若有 $x$ 条边起点终点都在前 $i$ 个点，则有 $j = i - x$ 条边从后 $n - i$ 个点连向前 $i$ 个点，$j$ 条边从前 $i$ 个点连向后 $n - i$ 个点。&lt;/p>
&lt;p>将起点终点都在前 $i$ 个点的边称为内边，起点终点中恰好有一个在前 $i$ 个点的边称为外边（恰好有 $2j$ 个），可以设计动态规划状态：$dp_{i, j, k}$ 表示前 $i$ 个点共有 $j$ 条外边，且内边长度以及外边在第 $i$ 个点之前的长度的和为 $k$ 的方案数。这样有转移方程 $dp_{i, j, k} \rightarrow dp_{i + 1, j - 1 | j | j + 1, k + 2j}$ ($j \pm 1 \ge 0$)，可以 $O(n^2m)$ 求解。&lt;/p>
&lt;p>进一步研究，发现对于任意满足 $dp_{i, j, k} \neq 0$ 的 $i, j, k$，都有 $k \ge j(j + 1)$，故 $j$ 这一维只需要枚举到 $\sqrt{m}$ 级别，复杂度优化为 $O(nm\sqrt{m})$，可以通过本题不限制交换 $n$ 次的版本。在状态中加入置换环的个数的奇偶性，即可通过本题。&lt;/p>
&lt;p>代码：&lt;a href="https://github.com/fei0319/competitive-programming/blob/main/code/luogu/P10547.cpp">https://github.com/fei0319/competitive-programming/blob/main/code/luogu/P10547.cpp&lt;/a>&lt;/p></description></item></channel></rss>